version: '3.8'

services:
  # Backend API service
  backend:
    build:
      context: .
      target: production
    container_name: quantum-ml-backend
    ports:
      - "8000:8000"
    environment:
      - DEBUG=false
      - LOG_LEVEL=INFO
      - CORS_ORIGINS=http://localhost:3000,http://127.0.0.1:3000
      - MAX_DATASET_SIZE=10000
      - ENABLE_QUANTUM_HARDWARE=false
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend service (for production)
  frontend:
    image: node:18-alpine
    container_name: quantum-ml-frontend
    working_dir: /app
    ports:
      - "3000:3000"
    volumes:
      - ./src:/app/src
      - ./public:/app/public
      - ./package.json:/app/package.json
      - ./package-lock.json:/app/package-lock.json
    command: >
      sh -c "npm install && npm run build && npx serve -s build -l 3000"
    depends_on:
      - backend
    restart: unless-stopped

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: quantum-ml-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    command: redis-server --appendonly yes

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: quantum-ml-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - frontend
    restart: unless-stopped

volumes:
  redis_data:

networks:
  default:
    name: quantum-ml-network